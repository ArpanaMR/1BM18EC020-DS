#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node *next;
};
typedef struct node * NODE;


NODE getnode()
{
	NODE p;
	p=(NODE)malloc(sizeof(struct node));
		return p;
}

NODE insert_front(NODE head,int item)
{
	NODE newn;
	newn=getnode();
	newn->data=item;
	newn->next=NULL;
  if(head==NULL)
  {
   head=newn;
   return head;
   }
   else{
   newn->next=head;
	head=newn;
	return head;
}

}
NODE insert_pos(NODE head,int item,int pos)
{
	NODE curr,prev,newn;
	prev=NULL;
	int count=1;
	newn=getnode();
	newn->data=item;
	newn->next=NULL;
	if(head==NULL)
	{
		if(pos==1)
			return newn;
		else
		{
			printf("Invalid position\n");
			return head;
		}
	}
	if(pos==1)
	{
		newn->next=head;
		head=newn;
		return head;
	}
	else
	{
		curr=head;
		while(curr!=NULL && count!=pos)
		{
			prev=curr;
			curr=curr->next;
			count++;
		}
		if(count==pos)
		{
			prev->next=newn;
			newn->next=curr;
			return head;
		}
	}
}


NODE insert_rear(NODE head,int item)
{
	NODE p,newn;
	newn=getnode();
	newn->data=item;
	newn->next=NULL;
	if(head==NULL)
		{
     head=newn;
     return head;
     }
     else{
	p=head;
	while(p->next!=NULL)
	{
		p=p->next;
	}
	p->next=newn;
	return head;

}
}


void display(NODE head)
{
	NODE p;
	if(head==NULL)
	{
		printf("list is empty\n");
		exit(0);
	}
	p=head;
	while(p!=NULL)
	{
		printf("%d\n",p->data);
		p=p->next;
	}


}
int main()
{
	NODE head=NULL;
	int ch,x,pos;

	do
	{
  printf("enter\n1.insert front\n2.insert at a position\n3.insert end\n4.display\n5.exit\n");
	scanf("%d",&ch);
		switch(ch)
		{
			case 1:printf("enter the item\n");
				scanf("%d",&x);
				head=insert_front(head,x);
				break;
			case 2:printf("enter the item\n");
				scanf("%d",&x);
				printf("enter the position\n");
				scanf("%d",&pos);
				head=insert_pos(head,x,pos);
				break;
			case 3:printf("enter the item\n");
				scanf("%d",&x);
				head=insert_rear(head,x);
				break;
			case 4:display(head);
				break;
			default:printf("invalid input\n");
		}

	}while(ch!=5);
	return 0;
}

	







